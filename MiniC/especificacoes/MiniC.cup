package br.com.minic.analisadorsintatico;

// TERMINAIS

terminal VOID, INT, FLOAT, DOUBLE, CHAR;
terminal INCLUDE, MAIN, RETURN, IF, ELSE, WHILE, PRINTF, PRINTINT, PRINTSTR;
terminal MENOR_IGUAL, MENOR, MAIOR_IGUAL, MAIOR, IGUAL, ATRIBUICAO, DIFERENTE, NEGACAO;
terminal SOMA, SUB, DIV, MULT;
terminal JOGO_DA_VELHA, PONTO, PONTO_VIRGULA, VIRGULA, ABRE_CHAVE, FECHA_CHAVE, ABRE_PARENTESES, FECHA_PARENTESES;
terminal LETRA_H;
terminal IDENTIFICADOR;
terminal LITERAL_INTEIRO;
terminal LITERAL_PONTO_FLUTUANTE;
terminal LITERAL_CHAR;
terminal LITERAL_STRING;

// NAO TERMINAL

non terminal ProgramaMiniC;
non terminal DeclInclude;
non terminal DeclIncludeList;
non terminal DeclFuncoes;
non terminal FuncaoPrincipal;
non terminal Tipo;

start with ProgramaMiniC;

ProgramaMiniC ::= DeclIncludeList {::};

DeclInclude ::= {::} |
				DeclIncludeList {::};
				
DeclIncludeList ::= {::} |
					DeclInclude DeclIncludeList {::};
					
DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR {::};

DeclFuncoes ::= Tipo IDENTIFICADOR ABRE_PARENTESES ListaArgumentos FECHA_PARENTESES ABRE_CHAVE Comando MULT RETURN Expressao PONTO_VIRGULA FECHA_CHAVE {::};

FuncaoPrincipal ::= INT MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE Comando MULT RETURN LITERAL_INTEIRO PONTO_VIRGULA FECHA_CHAVE {::};

Tipo ::= INT {::}; | FLOAT {::}; | DOUBLE {::}; | CHAR {::};

Comando ::= ABRE_CHAVE Comando MULT FECHA_CHAVE {::}; | 
	    IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando ELSE Comando {::}; |
	    IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando {::}; |
	    while ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando {::}; |
	    printf ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA {::}; |
	    printint ABRE_PARENTESES LITERAL_INTEIRO FECHA_PARENTESES PONTO_VIRGULA {::}; |
	    printstr ABRE_PARENTESES LITERAL_INTEIRO FECHA_PARENTESES PONTO_VIRGULA {::}; |
	    Tipo ID ABRE_PARENTESES Expressao FECHA_PARENTESES ABRE_PARENTESES VIRGULA ID FECHA_PARENTESES MULT PONTO_VIRGULA {::}; |
	    Tipo ID ATRIBUICAO Expressao ABRE_PARENTESES Expressao FECHA_PARENTESES ABRE_PARENTESES VIRGULA ID IGUAL Expressao FECHA_PARENTESES MULT PONTO_VIRGULA {::}; |
	    ID ATRIBUICAO Expressao PONTO_VIRGULA {::};
	    
ExpRel ::= ExpRelAux OpRelacional ExpRelAux {::}; |
	   NEGACAO ABRE_PARENTESES ExpRel FECHA_PARENTESES {::};

ExpRelAux ::= ID {::}; |
	      LITERAL_INTEIRO {::}; |
	      LITERAL_PONTO_FLUTUANTE {::};
	    
OpRelacional ::= MAIOR {::}; | MENOR {::}; | IGUAL {::}; | MAIOR_IGUAL {::}; | MENOR_IGUAL {::}; | DIFERENTE {::};

ExprAritmetica ::= ExprAritmetica SOMA T {::}; |
		   ExprAritmetica SUB T {::}; |
		   T {::};

T ::= T MULT F {::}; |
      T DIV F {::}; |
      F {::};
    
F ::= ABRE_PARENTESES ExprAritmetica FECHA_PARENTESES {::}; |
      ID {::}; |
      LITERAL_INTEIRO {::}; |
      LITERAL_PONTO_FLUTUANTE {::}; |
      ID ABRE_PARENTESES Parametros MULT FECHA_PARENTESES {::};
    
Expressao ::= ExprAritmetica {::}; |
	      LITERAL_CHAR {::}; |
	      LITERAL_STRING {::};
	    
Parametros ::= Expressao ABRE_PARENTESES VIRGULA Expressao FECHA_PARENTESES MULT {::};
