package br.com.minic.analisadorsintatico;

// TERMINAIS

terminal VOID, INT, FLOAT, DOUBLE, CHAR;
terminal INCLUDE, MAIN, RETURN, IF, ELSE, WHILE, PRINTF, PRINTINT, PRINTSTR;
terminal MENOR_IGUAL, MENOR, MAIOR_IGUAL, MAIOR, IGUAL, ATRIBUICAO, DIFERENTE, NEGACAO;
terminal SOMA, SUB, DIV, MULT;
terminal JOGO_DA_VELHA, PONTO, PONTO_VIRGULA, VIRGULA, ABRE_CHAVE, FECHA_CHAVE, ABRE_PARENTESES, FECHA_PARENTESES;
terminal LETRA_H;
terminal IDENTIFICADOR;
terminal LITERAL_INTEIRO;
terminal LITERAL_PONTO_FLUTUANTE;
terminal LITERAL_CHAR;
terminal LITERAL_STRING;

// NAO TERMINAL

non terminal ProgramaMiniC;
non terminal DeclInclude;
non terminal DeclIncludeList;
non terminal DeclFuncoes;
non terminal FuncaoPrincipal;
non terminal Tipo;

start with ProgramaMiniC;

ProgramaMiniC ::= DeclIncludeList {::};

DeclInclude ::= {::} |
				DeclIncludeList {::};
				
DeclIncludeList ::= {::} |
					DeclInclude DeclIncludeList {::};
					
DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR {::};

DeclFuncoes ::= Tipo IDENTIFICADOR ABRE_PARENTESES ListaArgumentos FECHA_PARENTESES ABRE_CHAVE Comando MULT RETURN Expressao FECHA_CHAVE {::};

FuncaoPrincipal ::= INT MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE Comando MULT RETURN LITERAL_INTEIRO FECHA_CHAVE {::};

Tipo ::= INT {::}; | FLOAT {::}; | DOUBLE {::}; | CHAR {::};

Comando ::= ABRE_CHAVE Comando MULT FECHA_CHAVE {::}; | 
	    IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando ELSE Comando |
	    IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando |
	    while ABRE_PARENTESES ExpRel FECHA_PARENTESES  Comando |
	    printf ABRE_PARENTESES Expressao FECHA_PARENTESES |
	    printint ABRE_PARENTESES Literal Inteiro FECHA_PARENTESES ; |
	    printstr ABRE_PARENTESES Literal Inteiro FECHA_PARENTESES ; |
	    Tipo ID ABRE_PARENTESES Expressao FECHA_PARENTESES(, ID)*; |
	    Tipo ID = Expressao ABRE_PARENTESES Expressao FECHA_PARENTESES(, ID = Expressao)*; |
	    ID = Expressao;
	    
ExpRel ::= ExpRelAux OpRelacional ExpRelAux |
	   !(ExpRel)

ExpRelAux ::= ID |
	    Literal Inteiro |
	    Literal Ponto Flutuante
	    
OpRelacional → > | < | == | >= | <= | !=

ExprAritmetica → ExprAritmetica + T |
		 ExprAritmetica - T |
		 T

T → T * F |
    T / F |
    F
    
F → (ExprAritmetica) |
    ID |
    Literal Inteiro |
    Literal Ponto Flutuante |
    ID (Parametros*)
    
Expressao → ExprAritmetica |
	    Literal Char |
	    Literal String
	    
Parametros → Expressao (, Expressao)*
